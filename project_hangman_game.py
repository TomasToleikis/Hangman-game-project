# -*- coding: utf-8 -*-
"""Project HANGMAN GAME.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g7K2fQvdCgph1qpkUSzk72zHy9J8YngW
"""

# RUN THIS CELL BEFORE PLAYING A GAME
# Import of the words' list file for the game
!curl https://raw.githubusercontent.com/TomasToleikis/Hangman-game-project/master/hangman_words.txt -o hangman_words.txt

import random
hangman_file = open("hangman_words.txt")
hangman_words = hangman_file.read().splitlines()
hangman_file.close()
word = random.choice(hangman_words).upper()
word_hint = random.choice(hangman_words).upper()
display_word_letters = ['_' for i in range(len(word))]
letters_allready_entered = []
wrong_guesses = 0

# A class of a gallows symbol art
class Gallows:
    def __init__(self, gallows, mistake_strings):
        self.gallows = gallows
        self.mistake_strings = mistake_strings
    
    # A function that updates gallow symbol art according to the nr. of mistakes
    def gallow_display(self, mistake_count=0):
        gallows_list = self.gallows.split('\n')
        for i in range(mistake_count):
            gallows_list[self.mistake_strings[i]['line']] = self.mistake_strings[i]['string']
        return '\n'.join(gallows_list)

# Game mode selection: HANGMAN mode (allows 6 mistakes) or CHRISTMAS TREE mode (allows 7 mistakes)
print('Please chose the game mode:')
print('-to chose HANGMAN mode (6 mistakes), enter H')
print('-to chose CHRISTMAS TREE mode (7 mistakes), enter C\n') 

while True:
    mode = input('')
    if mode.upper() == 'H':
        hangman = Gallows('   __ __ __\n  |  /    | \n  | /     È±\n  |/\n  |\n  |\n///////////////',
                         [{'string' : '  | /     O', 'line' : 2},
                         {'string' : '  |/      |', 'line' : 3},
                         {'string' : '  |/     /|', 'line' : 3},
                         {'string' : '  |/     /|\ ', 'line' : 3},
                         {'string' : '  |      /', 'line' : 4},
                         {'string' : '  |      / \ ', 'line' : 4}])
        break
    elif mode.upper() == 'C':
        hangman = Gallows('      o\n     / \\\n    / o \\\n   / o o \\\n  / o o o \\',
                         [{'string' : '  / o o   \\', 'line' : 4},
                         {'string' : '  / o     \\', 'line' : 4},
                         {'string' : '  /       \\', 'line' : 4},
                         {'string' : '   / o   \\', 'line' : 3},
                         {'string' : '   /     \\', 'line' : 3},
                         {'string' : '    /   \\', 'line' : 2},
                         {'string' : '', 'line' : 0}])
        break
    else:
        print('You must enter either \'H\' or \'C\'')

# Function for letter input
def letter_input(letters_allready_entered):
    letter = input('Please input a letter: ').upper()
    if letter.isalpha():
        if letter in letters_allready_entered:
            print('This letter was allready entered.\n')
            return letter_input(letters_allready_entered)
        elif len(letter) > 1:
            print('Only a single letter should be entered.\n')
            return letter_input(letters_allready_entered)
        else:
            return letter
    else:
        print('The letter must be an alphabetical character.\n')
        return letter_input(letters_allready_entered)

# Function for updating display word list - it replaces underline sumbol with a correct letter
def update_display_word(letter, word, display_word_letters):
    letter_indexes = [i for i in range(len(word)) if word[i] == letter]
    for j in letter_indexes:
        display_word_letters[j] = letter
    return display_word_letters

# The game begins
print(hangman.gallow_display(wrong_guesses))
print('Guess the word:')
        
# Main loop of the game. It updates either display word of gallows symbol and 
# shows them to user depending on the letter entered. Also determines 
# winning or loosing
while True:
    print(' '.join(display_word_letters) + '\n')
    
    # A hint - number of common words in a different random word
    # The if below prints the hint only on the first loop (while letter is not input yet)
    if not letters_allready_entered:
        count = 0
        for i in set(word):
            if i in word_hint:
                count += 1
        print('!!! HINT !!! Our secret word and the word', word_hint, 'shares', count, 'common letters !!!\n')
            
    letter = letter_input(letters_allready_entered)
    letters_allready_entered.append(letter)

    if letter in word:
        display_word_letters = update_display_word(letter, word, display_word_letters)        
    else:
        wrong_guesses += 1
        if wrong_guesses == len(hangman.mistake_strings):
            print(hangman.gallow_display(wrong_guesses))
            print(wrong_guesses, 'wrong guesses.. You lost!')
            print('The word:', word)
            break
        print(hangman.gallow_display(wrong_guesses))
        print('Bad guess.', wrong_guesses, 'wrong answer\n',)
            
    if not '_' in display_word_letters:
        print('Congratulations! You won!')
        print('The word:', word)
        break